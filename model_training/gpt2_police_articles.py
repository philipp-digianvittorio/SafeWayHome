# -*- coding: utf-8 -*-
"""gpt2_ft_police_articles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12znBljCJ2H0UT9dHtywI3aO4rX4Xnh6o
"""

!pip install transformers
!pip install datasets
!pip install huggingface_hub

import os
import torch
import pandas as pd
from datasets import Dataset
from huggingface_hub import login
from transformers import GPT2Tokenizer, DataCollatorForLanguageModeling, TrainingArguments, Trainer, \
                         GPT2LMHeadModel, pipeline

# -- upload image data to colab drive
import shutil
from google.colab import drive
drive.mount('/content/drive')

dir_path = '/content/drive/MyDrive/'
shutil.copy(dir_path + 'pretrain_articles.txt', '/content/')
shutil.copy(dir_path + 'gpt_output_clean_new.xlsx', '/content/')

PRETRAIN_URL = "pretrain_articles.txt"
FINETUNE_URL = "gpt_output_clean_new.xlsx"
checkpoint = "gpt2-xl"
#checkpoint = "pdg/gpt2_police_articles_pretrained"

login(token="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")

df = pd.read_excel(FINETUNE_URL)

tokenizer = GPT2Tokenizer.from_pretrained(checkpoint)
model = GPT2LMHeadModel.from_pretrained(checkpoint)

data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)
tokenizer.pad_token = tokenizer.eos_token

# Add our singular prompt
TASK = "Extract the crime, the location and whether the crime happend indoors \n"
INPUT_TEXT = "TEXT: " + df['article'].str[:950] + "\n"
CRIME = "CRIME: " + df['crime'].apply(lambda x: ", ".join(eval(x))) + "\n"
LOC = "LOC: " + df['location'] + "\n"
INDOORS = "INDOORS: " + df['indoors'].astype(str) + "\n"

# This is our "training prompt" that we want GPT2 to recognize and learn
training_examples = TASK + INPUT_TEXT + CRIME + LOC + INDOORS

print(training_examples[0])

task_df = pd.DataFrame({'text': training_examples})
task_df.head(2)

with open(PRETRAIN_URL, "r", encoding='cp1250') as f:
    articles = eval(f.read())

pretrain_df = pd.DataFrame({"text": [a["headline"] + "\n" + a["article"][:950] for a in articles]})
pretrain_df.head(2)

def preprocess(examples):  # tokenize our text but don't pad because our collator will pad for us dynamically
    return tokenizer(examples['text'], truncation=True)

pretrain_data = Dataset.from_pandas(pretrain_df) # turn a pandas DataFrame into a Dataset
pretrain_data = pretrain_data.map(preprocess, batched=True)

crime_data = Dataset.from_pandas(task_df)  # turn a pandas DataFrame into a Dataset
crime_data = crime_data.map(preprocess, batched=True)
crime_data = crime_data.train_test_split(train_size=.9)

"""## Pre-training"""

training_args = TrainingArguments(
    output_dir="./gpt2_police_articles_pretrained",
    overwrite_output_dir=True, #overwrite the content of the output directory
    num_train_epochs=1, # number of training epochs
    per_device_train_batch_size=2, # batch size for training
    logging_steps=100,
    log_level='info',
    save_strategy='no',
    push_to_hub=True
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=pretrain_data,
    data_collator=data_collator,
)

trainer.train()

trainer.model.push_to_hub("gpt2_police_articles_pretrained")

"""##Fine-tuning"""

training_args = TrainingArguments(
    output_dir="./gpt2_police_articles",
    overwrite_output_dir=True, #overwrite the content of the output directory
    num_train_epochs=5, # number of training epochs
    per_device_train_batch_size=2, # batch size for training
    per_device_eval_batch_size=2,  # batch size for evaluation
    load_best_model_at_end=True,
    logging_steps=50,
    log_level='info',
    evaluation_strategy='no',
    save_strategy='no',
    push_to_hub = True
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=crime_data["train"],
    eval_dataset=crime_data["test"],
    data_collator=data_collator,
)

trainer.train()

trainer.evaluate()

trainer.save_model()  # save this model

#model = GPT2LMHeadModel.from_pretrained('./gpt2_ft_police_articles')

trainer.model.push_to_hub("gpt2_police_articles")
tokenizer.push_to_hub("gpt2_police_articles")

prompt = '''Extract the crime, the location and whether the crime happend indoors
TEXT: POL-MA: Heidelberg: Exhibitionist belästigt Passantin - Zeugen gesucht!
Ein bislang unbekannter Täter sprach am Sonntagnacht gegen 00:15 Uhr in der Bahnstadt eine Passantin zunächst aus seinem parkenden Fahrzeug heraus an. Hierbei hatte er sich in unsittlicher Weise entblößt und nahm sexuelle Handlungen an sich vor. Ca. 30 Jahre alt, schwarze kurze Haare, rasiert, schmale Statur, hellhäutig, trug beidseitig Ohrringe, sprach deutsch Die weiteren Ermittlungen hat die Kriminalpolizei übernommen.
CRIME:'''

rompt = '''Extract the crime, the location and whether the crime happend indoors
TEXT: POL-MA: Heidelberg-Altstadt: Angriff mit Pfefferspray in der Heidelberger Altstadt
Am frühen Samstagmorgen, waren gegen 04:35 Uhr ein 24-jähriger junger Mann zusammen mit seiner Begleitung in der Heidelberger Altstadt im Bereich der Unteren Straße unterwegs. Auf Höhe der Bussemergasse trafen sie auf zwei männliche Personen die unaufgefordert an die weibliche Begleitung herantraten und versuchten sie zu küssen. Diesem aufdringlichen Angriff konnten die beiden noch abwehren, trafen aber kurze Zeit später wieder auf die aufdringlichen Männer im Bereich der Dreikönigstraße / Lauerstraße. Hier gingen die beiden Tatverdächtigen Männer sofort aggressiv auf die Geschädigten los, schlugen mehrfach auf den 24-jährigen ein und sprühten beiden mit einem Pfefferspray in das Gesicht.
CRIME:'''

prompt = '''Extract the crime, the location and whether the crime happend indoors
TEXT: POL-MA: Eppelheim: Verbaler Streit endet in Bedrohung mit einer Schusswaffe 
Am Samstag kam es gegen 21.55 Uhr vor einer Eishalle in der Rudolf-Diesel-Straße zu einer Bedrohung mit einer Schusswaffe. Zuvor waren eine 19- Jährige und ein 22-Jähriger mit dem bislang unbekannten Täter in der Eishalle verbal in Streit geraten. Der bislang unbekannte Täter passte die beiden Geschädigten und zwei weitere Zeugen vor der Eishalle ab und bedrohte die beiden Geschädigten hier mit einer Schusswaffe. Ob es sich hierbei um eine Schreckschusswaffe handelt oder nicht, konnte bislang nicht in Erfahrung gebracht werden. Der Vorfall konnte durch mehrere Besucher beobachtet werden, die jedoch vor Ort nicht mehr festgestellt werden konnten. Männlich, ca. 17 Jahre alt, ca. 1,70 m, schlanke Statur, Oberlippenbart und kleiner Kinnbart, trug graue Wollmütze, hellgraue Wellensteyn-Jacke mit Fell am Kragen. Die Ermittlungen hinsichtlich der Bedrohung dauern noch und werden durch den Polizeiposten Eppelheim übernommen.
CRIME:'''

crime_generator = pipeline('text-generation', model=model, tokenizer=tokenizer)

print(crime_generator(
    prompt, num_beams=5, early_stopping=True, temperature=0.6,
    max_length=len(tokenizer.encode(prompt)) + 25
)[0]['generated_text'])